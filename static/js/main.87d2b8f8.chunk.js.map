{"version":3,"sources":["components/Scoreboard/index.js","components/Jumbotron/index.js","components/Container/index.js","components/TowerCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Scoreboard","props","className","score","topScore","Jumbotron","message","Container","children","TowerCard","onClick","handleClickEvent","id","alt","name","src","process","image","App","state","towers","newTowers","sort","Math","random","filter","card","clicked","setState","newRound","forEach","tower","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i2CAoBeA,G,MAhBI,SAAAC,GAAK,OAEpB,yBAAKC,UAAU,wCAEb,wBAAIA,UAAU,sBACZ,wBAAIA,UAAU,YACZ,yDAGJ,0BAAMA,UAAU,cAAhB,UACUD,EAAME,MADhB,iBACqCF,EAAMG,aCAlCC,G,MAVG,SAAAJ,GAAK,OAEnB,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAaD,EAAMK,SACjC,wBAAIJ,UAAU,QAAd,qECJOK,G,MAFG,SAAAN,GAAK,OAAI,yBAAKC,UAAU,aAAaD,EAAMO,YCS9CC,G,MATG,SAAAR,GAAK,OAEnB,yBAAKC,UAAU,OAAOQ,QAAS,kBAAMT,EAAMU,iBAAiBV,EAAMW,MAChE,yBAAKV,UAAU,iBACb,yBAAKW,IAAKZ,EAAMa,KAAMC,IAAKC,YAAyBf,EAAMgB,YCkEnDC,E,2MA/DbC,MAAQ,CACNC,SACAd,QAAS,2BACTH,MAAO,EACPC,SAAU,G,EAGZO,iBAAmB,SAAAC,GACjB,IAAIS,EAAY,EAAKF,MAAMC,OAAOE,MAAK,kBAAMC,KAAKC,SAAW,MAC7D,EAAKL,MAAMC,OAAOK,QAAO,SAAAC,GAiBvB,OAhBId,IAAOc,EAAKd,MACO,IAAjBc,EAAKC,SACPD,EAAKC,SAAU,EACf,EAAKC,SAAS,CACZzB,MAAO,EAAKgB,MAAMhB,MAAQ,EAC1BG,QAAS,6BAEP,EAAKa,MAAMhB,OAAS,EAAKgB,MAAMf,UACjC,EAAKwB,SAAS,CAAExB,SAAU,EAAKe,MAAMf,SAAW,KAKlD,EAAKyB,YAGFR,M,EAIXQ,SAAW,WACL,EAAKV,MAAMhB,MAAQ,EAAKgB,MAAMf,UAChC,EAAKwB,SAAS,CAAExB,SAAU,EAAKe,MAAMhB,QAEvC,EAAKgB,MAAMC,OAAOU,SAAQ,SAAAC,GACxB,OAAOA,EAAMJ,SAAU,KAEzB,EAAKC,SAAS,CACZtB,QAAS,gEACTH,MAAO,K,wEAID,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAYA,MAAO6B,KAAKb,MAAMhB,MAAOC,SAAU4B,KAAKb,MAAMf,WAC1D,kBAAC,EAAD,CAAWE,QAAS0B,KAAKb,MAAMb,UAC/B,kBAAC,EAAD,KACG0B,KAAKb,MAAMC,OAAOa,KAAI,SAAAF,GAAK,OAC1B,kBAAC,EAAD,CACEpB,iBAAkB,EAAKA,iBACvBC,GAAImB,EAAMnB,GACVsB,IAAKH,EAAMnB,GACXK,MAAOc,EAAMd,iB,GAxDTkB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.87d2b8f8.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css'\n\n\nconst Scoreboard = props =>\n  (\n    <nav className=\"navbar navbar-expand-lg navbar-light\">\n\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item\">\n          <span>World of Water Towers</span>\n        </li>\n      </ul>\n      <span className=\"score-card\">\n        Score: {props.score} | Top Score: {props.topScore}\n      </span>\n\n    </nav>\n  );\n\nexport default Scoreboard;","import React from 'react';\nimport './style.css'\n\n\nconst Jumbotron = props =>\n  (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">{props.message}</h1>\n        <h3 className=\"lead\">Click any tower to score, but don't click the same one twice!</h3>\n      </div>\n    </div>\n  );\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nconst Container = props => <div className=\"container\">{props.children}</div>;\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nconst TowerCard = props =>\n  (\n    <div className=\"card\" onClick={() => props.handleClickEvent(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={process.env.PUBLIC_URL + props.image} />\n      </div>\n    </div>\n  );\n\nexport default TowerCard;","import React, { Component } from 'react';\nimport towers from './towers.json';\nimport Scoreboard from './components/Scoreboard';\nimport Jumbotron from './components/Jumbotron';\nimport Container from './components/Container';\nimport TowerCard from './components/TowerCard';\n\n\nclass App extends Component {\n  // Setting this.state.towers to the towers json array\n  state = {\n    towers,\n    message: \"Click an image to begin!\",\n    score: 0,\n    topScore: 0\n  };\n\n  handleClickEvent = id => {\n    let newTowers = this.state.towers.sort(() => Math.random() - 0.5)\n    this.state.towers.filter(card => {\n      if (id === card.id) {\n        if (card.clicked === false) {\n          card.clicked = true;\n          this.setState({\n            score: this.state.score + 1,\n            message: \"That was a great choice!\"\n          });\n          if (this.state.score >= this.state.topScore) {\n            this.setState({ topScore: this.state.topScore + 1 })\n          }\n\n        }\n        else {\n          this.newRound();\n        }\n      }\n      return newTowers;\n    });\n  }\n\n  newRound = () => {\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n    this.state.towers.forEach(tower => {\n      return tower.clicked = false;\n    });\n    this.setState({\n      message: \"Uh oh, you already chose that one! Game restarted. Try Again!\",\n      score: 0\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Scoreboard score={this.state.score} topScore={this.state.topScore} />\n        <Jumbotron message={this.state.message} />\n        <Container>\n          {this.state.towers.map(tower => (\n            <TowerCard\n              handleClickEvent={this.handleClickEvent}\n              id={tower.id}\n              key={tower.id}\n              image={tower.image}\n            />\n          ))}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}